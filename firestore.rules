rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Clients collection rules
    match /clients/{clientId} {
      // Allow read and write only if user is authenticated
      allow read, write: if isAuthenticated();
      
      // Nested collections under clients
      match /{document=**} {
        allow read, write: if isAuthenticated();
      }

      allow create: if request.auth != null 
        && request.resource.data.keys().hasAll(['name', 'email', 'cpf', 'phone', 'asaasId', 'createdAt'])
        && request.resource.data.name is string
        && request.resource.data.email is string
        && request.resource.data.cpf is string
        && request.resource.data.phone is string
        && request.resource.data.asaasId is string
        && request.resource.data.createdAt is string;
    }

    // Allocations collection rules
    match /allocations/{allocationId} {
      // Allow read and write only if user is authenticated
      allow read, write: if isAuthenticated();
    }

    // Payment rules
    match /payments/{paymentId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null
        && request.resource.data.clientId is string
        && request.resource.data.date is string
        && request.resource.data.dueDate is string
        && request.resource.data.value is number
        && request.resource.data.value > 0
        && request.resource.data.status in ['pending', 'paid', 'overdue']
        && request.resource.data.createdAt is string;
      
      allow update: if request.auth != null
        && request.resource.data.clientId == resource.data.clientId
        && request.resource.data.date is string
        && request.resource.data.dueDate is string
        && request.resource.data.value is number
        && request.resource.data.value > 0
        && request.resource.data.status in ['pending', 'paid', 'overdue']
        && request.resource.data.updatedAt is string;
      
      allow delete: if request.auth != null;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 